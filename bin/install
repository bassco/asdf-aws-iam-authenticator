#!/usr/bin/env bash

set -euo pipefail

[ -z "${ASDF_INSTALL_TYPE+x}" ] && echo "ASDF_INSTALL_TYPE is required" && exit 1
[ -z "${ASDF_INSTALL_VERSION+x}" ] && echo "ASDF_INSTALL_VERSION is required" && exit 1
[ -z "${ASDF_INSTALL_PATH+x}" ] && echo "ASDF_INSTALL_PATH is required" && exit 1

install() {
  local install_type=$1
  [ "$install_type" != "version" ] && echo "install type, $install_type, is not supported" && exit 1

  local version=$2
  local install_path=$3

  local bin_install_path="$install_path/bin"
  local bin_path="${bin_install_path}/aws-iam-authenticator"

  local platform
  [ "Linux" = "$(uname)" ] && platform="linux" || platform="darwin"
  local arch
  [ "x86_64" = "$(uname -m)" ] && arch="amd64" || arch="386"

  local download_url
  download_url="https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${version}/aws-iam-authenticator_${version}_${platform}_${arch}"
  #checksum_url="https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${version}/authenticator_${version}_checksums.txt"
  mkdir -p "${bin_install_path}"

  echo "Downloading aws-iam-authenticator from ${download_url}"

  STATUSCODE=$(curl -q --write-out "%{http_code}" -Lo "$bin_path" -C - "$download_url")

  if test "${STATUSCODE}" -ne 200; then
    echo "Binary for version '${version}' was not found or could not be retrieved."
    exit 1
  fi

  chmod +x "$bin_path"
}

install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"

